// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v1.0.0
// - protoc             v5.26.1
// source: api/greeter/greeter.proto

package greeter

import (
	"context"

	"github.com/mangohow/mangokit/transport/http"
)

// GreeterHTTPService Examples:
type GreeterHTTPService interface {
	// SayHello Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterHTTPService(server *http.Server, svc GreeterHTTPService) {
	server.RegisterService(_GreeterHTTPService_serviceDesc, svc)
}

func _Greeter_SayHello_HTTP_Handler(svc interface{}, ctx context.Context, dec func(interface{}) error, middleware http.Middleware) (interface{}, error) {
	in := new(HelloRequest)
	err := dec(in)
	if err != nil {
		return nil, err
	}

	if middleware == nil {
		return svc.(GreeterHTTPService).SayHello(ctx, in)
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return svc.(GreeterHTTPService).SayHello(ctx, in)
	}

	return middleware(ctx, in, handler)

}

type GreeterHTTPClient interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (*HelloReply, error)
}

type greeterHTTPClient struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &greeterHTTPClient{cc: client}
}

func (c *greeterHTTPClient) SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	reply := new(HelloReply)
	pattern := "/greeter"
	path := http.EncodeURLFromForm(pattern, req)
	_, err := c.cc.Invoke(ctx, "GET", path, req, reply, opts...)

	return reply, err
}

var _GreeterHTTPService_serviceDesc = &http.ServiceDesc{
	HandlerType: (*GreeterHTTPService)(nil),
	Methods: []http.MethodDesc{
		{
			Method:  "GET",
			Path:    "/greeter",
			Handler: _Greeter_SayHello_HTTP_Handler,
		},
	},
}
